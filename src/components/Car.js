/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useLayoutEffect } from 'react'
import { useFrame, useThree } from '@react-three/fiber'
import { useGLTF, PerspectiveCamera, MeshDistortMaterial, Html } from '@react-three/drei'

import * as THREE from 'three'

import useGameState from '../hooks/useGameState'

const v = new THREE.Vector3()

export default function Model(props, { children }) {
  const { nodes, materials } = useGLTF('/models/spaceship.gltf')

  const pointLight = useRef()
  const defaultCamera = useRef()

  const car = useRef()
  const engine = useRef()
  const outerExhaust = useRef()
  const innerExhaust = useRef()

  const leftWingTrail = useRef()
  const rightWingTrail = useRef()

  const { clock } = useThree()

  const leftSpeed = useRef(0)
  const rightSpeed = useRef(0)
  const highestSpeed = useRef(0)
  const loweringSpeed = useRef(0)


  useLayoutEffect(() => {
    defaultCamera.current.rotation.set(0, Math.PI, 0)
    defaultCamera.current.position.set(0, 4, -9) // 0, 1.5, -8
    defaultCamera.current.lookAt(v.set(car.current.position.x, car.current.position.y, car.current.position.z + 10/*10*/)) // modify the camera tracking to look above the center of the car

    defaultCamera.current.rotation.z = Math.PI
    car.current.rotation.y = Math.PI
  }, [])

  useFrame((state, delta) => {
    const bigDelta = delta * 10
    const smallDelta = delta * 2
    const accelDelta = delta / 4

    const { controls: { left, right } } = useGameState.getState()

    rightWingTrail.current.scale.x = Math.sin(clock.getElapsedTime() * 15) / 100
    rightWingTrail.current.scale.y = Math.sin(clock.getElapsedTime() * 10) / 100
    leftWingTrail.current.scale.x = Math.sin(clock.getElapsedTime() * 15) / 100
    leftWingTrail.current.scale.y = Math.sin(clock.getElapsedTime() * 10) / 100

    // hovering up and down slightly
    car.current.position.y -= Math.sin(clock.getElapsedTime() * 5) / 80

    if ((left && right) || (!left && !right)) {
      highestSpeed.current = Math.max(leftSpeed.current, rightSpeed.current)

      if (highestSpeed.current > 0) {
        loweringSpeed.current = highestSpeed.current
      } else {
        loweringSpeed.current -= accelDelta
      }

      leftSpeed.current = 0
      rightSpeed.current = 0

      // Pos
      if (car.current.position.x > 0 + delta) {
        car.current.position.x -= delta
      } else if (car.current.position.x < 0 - delta) {
        car.current.position.x += delta
      } else {
        car.current.position.x = 0
      }

      // Rot
      if (car.current.rotation.x > 0) {
        car.current.rotation.x -= delta / 3
      } else {
        car.current.rotation.x = 0
      }

      if (car.current.rotation.y > Math.PI + smallDelta) {
        car.current.rotation.y -= smallDelta
      } else if (car.current.rotation.y < Math.PI - smallDelta) {
        car.current.rotation.y += smallDelta
      } else {
        car.current.rotation.y = Math.PI
      }

      if (car.current.rotation.z > 0 + delta) {
        car.current.rotation.z -= delta
      } else if (car.current.rotation.z < 0 - delta) {
        car.current.rotation.z += delta
      } else {
        car.current.rotation.z = 0
      }
    }

    if ((left && !right)) {
      rightSpeed.current = 0
      leftSpeed.current += accelDelta

      // pos 
      car.current.position.x = Math.min(1.4, car.current.position.x += leftSpeed.current / 5)

      // rot
      car.current.rotation.x = Math.min(0.1, car.current.rotation.x += bigDelta / 15)
      car.current.rotation.y = Math.min(Math.PI + 0.5, car.current.rotation.y += leftSpeed.current / 15)
      car.current.rotation.z = Math.max(-0.3, car.current.rotation.z -= leftSpeed.current / 15)

      // wing trail
      rightWingTrail.current.scale.x = Math.sin(clock.getElapsedTime() * 15) / 40
      rightWingTrail.current.scale.y = Math.sin(clock.getElapsedTime() * 10) / 40
      leftWingTrail.current.scale.x = Math.sin(clock.getElapsedTime() * 15) / 200
      leftWingTrail.current.scale.y = Math.sin(clock.getElapsedTime() * 10) / 200
    }

    if ((!left && right)) {
      rightSpeed.current += accelDelta
      leftSpeed.current = 0

      // pos 
      car.current.position.x = Math.max(-1.4, car.current.position.x -= rightSpeed.current / 5)

      // rot
      car.current.rotation.x = Math.min(0.1, car.current.rotation.x += bigDelta / 15)
      car.current.rotation.y = Math.max(Math.PI - 0.5, car.current.rotation.y -= rightSpeed.current / 15)
      car.current.rotation.z = Math.min(0.3, car.current.rotation.z += rightSpeed.current / 15)

      // wing trail
      leftWingTrail.current.scale.x = Math.sin(clock.getElapsedTime() * 15) / 40
      leftWingTrail.current.scale.y = Math.sin(clock.getElapsedTime() * 10) / 40
      rightWingTrail.current.scale.x = Math.sin(clock.getElapsedTime() * 15) / 200
      rightWingTrail.current.scale.y = Math.sin(clock.getElapsedTime() * 10) / 200
    }

    outerExhaust.current.scale.x = 0.15 + Math.sin(clock.getElapsedTime() * 15) / 15
    outerExhaust.current.scale.y = 0.30 + Math.sin(clock.getElapsedTime() * 10) / 10
    innerExhaust.current.scale.x = 0.10 + Math.sin(clock.getElapsedTime() * 15) / 15
    innerExhaust.current.scale.y = 0.25 + Math.sin(clock.getElapsedTime() * 10) / 10
  })

  return (
    <group receiveShadow castShadow ref={car} position={[0, 0.87, 0]} {...props} dispose={null}>
      <PerspectiveCamera makeDefault ref={defaultCamera} fov={75} rotation={[0, Math.PI, 0]} position={[0, 10, -20]} />
      <pointLight ref={pointLight} color="red" decay={4} distance={50} intensity={15} position={[0, 0, -2]} />
      {children}
      <mesh geometry={nodes.Ship_Body.geometry} material={materials.Cockpit} />
      <mesh geometry={nodes.Ship_Body_1.geometry} material={materials.Chassis} />
      <mesh ref={engine} geometry={nodes.Ship_Body_2.geometry}>
        <meshBasicMaterial attach="material" color="orange" />
      </mesh>
      <mesh geometry={nodes.Ship_Body_3.geometry} material={materials['Gray Metal']} />
      <mesh geometry={nodes.Ship_Body_4.geometry}>
        <meshBasicMaterial attach="material" color="lightpink" />
      </mesh>
      <mesh ref={leftWingTrail} scale={[0.01, 0.01, 2]} position={[1.60, -0.3, -6.2]}>
        <dodecahedronBufferGeometry args={[1.5, 3]} />
        <meshBasicMaterial transparent opacity={0.6} color="white" />
      </mesh>
      <mesh ref={rightWingTrail} scale={[0.01, 0.01, 2]} position={[-1.60, -0.3, -6.2]}>
        <dodecahedronBufferGeometry args={[1.5, 3]} />
        <meshBasicMaterial transparent opacity={0.6} color="white" />
      </mesh>
      <mesh ref={outerExhaust} scale={[0.1, 0.05, 2]} position={[0, -0.3, -4.5]}>
        <dodecahedronBufferGeometry args={[1.5, 3]} />
        <MeshDistortMaterial speed={2} distort={0.2} radius={1} transparent opacity={0.6} color="red" />
      </mesh>
      <mesh ref={innerExhaust} scale={[0.1, 0.05, 2]} position={[0, -0.3, -4.5]}>
        <dodecahedronBufferGeometry args={[1.5, 3]} />
        <meshBasicMaterial color="white" />
      </mesh>
    </group>
  )
}


useGLTF.preload('/models/spaceship.gltf')




