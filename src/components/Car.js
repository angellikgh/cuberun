/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState, useEffect, useLayoutEffect } from 'react'
import { useFrame, useThree, extend } from '@react-three/fiber'
import { useGLTF, PerspectiveCamera, MeshDistortMaterial } from '@react-three/drei'
import { EffectComposer, SelectiveBloom } from '@react-three/postprocessing'

import * as THREE from 'three'

import useGameState from '../hooks/useGameState'

const v = new THREE.Vector3()

export default function Model(props, { children }) {
  const { clock } = useThree()
  const car = useRef()
  const engine = useRef()

  // const { nodes, materials } = useGLTF(
  //   '/models/car.gltf'
  // )

  const { nodes, materials } = useGLTF('/models/spaceship.gltf')

  const [carPos, setCarPos] = useState({ leftSpeed: 0, rightSpeed: 0, position: { x: 0, y: 0, z: 0 }, rotation: { x: 0, y: Math.PI, z: 0 } })

  const defaultCamera = useRef()

  const glowRef = useRef()
  const pointLight = useRef()

  const outerExhaust = useRef()
  const innerExhaust = useRef()

  useLayoutEffect(() => {
    defaultCamera.current.rotation.set(0, Math.PI, 0)
    defaultCamera.current.position.set(0, 4, -8) // 0, 1.5, -8
    defaultCamera.current.lookAt(v.set(car.current.position.x, car.current.position.y, car.current.position.z + 10 /*10*/)) // modify the camera tracking to look above the center of the car
    defaultCamera.current.rotation.z = Math.PI
  }, [])

  useFrame((state, delta) => {
    const { controls: { left, right }, speedFactor: speed } = useGameState.getState()

    if ((left && right) || (!left && !right)) {
      setCarPos(prev => {

        return {
          rightSpeed: 0,
          leftSpeed: 0,
          position: { ...prev.position, x: prev.position.x > 0 ? prev.position.x -= 0.01 : prev.position.x < 0 ? prev.position.x += 0.01 : 0 },
          rotation: {
            x: prev.rotation.x > 0 ? prev.rotation.x -= 0.01 : 0,
            y: prev.rotation.y > Math.PI ?
              prev.rotation.y -= 0.005 :
              prev.rotation.y < Math.PI ?
                prev.rotation.y += 0.005 : Math.PI,
            z: prev.rotation.z > 0 ? prev.rotation.z -= 0.005 : prev.rotation.z < 0 ? prev.rotation.z += 0.005 : 0
          }
        }
      })
    }

    if ((left && !right)) {
      setCarPos(prev => {
        return {
          rightSpeed: 0,
          leftSpeed: prev.leftSpeed += 0.0002,
          position: { ...prev.position, x: Math.min(1.4, prev.position.x += prev.leftSpeed) },
          rotation: {
            x: Math.min(0.1, prev.rotation.x += 0.01),
            y: Math.min(Math.PI + 0.5, prev.rotation.y += prev.leftSpeed),
            z: Math.max(-0.3, prev.rotation.z -= prev.leftSpeed)
          }
        }
      })
    }

    if ((!left && right)) {
      setCarPos(prev => {

        return {
          rightSpeed: prev.rightSpeed += 0.0002,
          leftSpeed: 0,
          position: { ...prev.position, x: Math.max(-1.4, prev.position.x -= prev.rightSpeed) },
          rotation: {
            x: Math.min(0.1, prev.rotation.x += 0.01),
            y: Math.max(Math.PI - 0.5, prev.rotation.y -= prev.rightSpeed),
            z: Math.min(0.3, prev.rotation.z += prev.rightSpeed)
          }
        }
      })
    }


    // setCarPos(prev => ({
    //   position: { ...prev.position, x: mouse.x * 6 },
    //   rotation: {
    //     z: +mouse.x * 0.5,
    //     x: mouse.x >= 0 ? mouse.x * 0.5 : -mouse.x * 0.5,
    //     y: Math.PI - mouse.x * 1.1
    //   }
    // }))
  })

  useFrame((state, delta) => {
    outerExhaust.current.scale.x = 0.15 + Math.sin(clock.getElapsedTime() * 15) / 15
    outerExhaust.current.scale.y = 0.30 + Math.sin(clock.getElapsedTime() * 10) / 10
    innerExhaust.current.scale.x = 0.10 + Math.sin(clock.getElapsedTime() * 15) / 15
    innerExhaust.current.scale.y = 0.25 + Math.sin(clock.getElapsedTime() * 10) / 10
    car.current.rotation.x = carPos.rotation.x
    car.current.rotation.y = carPos.rotation.y
    car.current.rotation.z = carPos.rotation.z
    car.current.position.x = carPos.position.x
    car.current.position.y = carPos.position.y
    car.current.position.z = carPos.position.z
  })

  return (
    <group receiveShadow castShadow ref={car} position={[0, 0.87, 0]} {...props} dispose={null}>
      <PerspectiveCamera makeDefault ref={defaultCamera} fov={75} rotation={[0, Math.PI, 0]} position={[0, 10, -20]} />
      <pointLight ref={pointLight} color="lightpink" decay={4} distance={50} intensity={5} position={[0, 0, -2]} />
      {children}
      <mesh geometry={nodes.Ship_Body.geometry} material={materials.Cockpit} />
      <mesh geometry={nodes.Ship_Body_1.geometry} material={materials.Chassis} />
      <mesh ref={engine} geometry={nodes.Ship_Body_2.geometry}>
        <meshBasicMaterial attach="material" color="orange" />
      </mesh>
      <mesh geometry={nodes.Ship_Body_3.geometry} material={materials['Gray Metal']} />
      <mesh ref={glowRef} geometry={nodes.Ship_Body_4.geometry}>
        <meshBasicMaterial attach="material" color="lightpink" />
      </mesh>
      <mesh ref={outerExhaust} scale={[0.1, 0.05, 2]} position={[0, -0.3, -4.5]}>
        <dodecahedronBufferGeometry args={[1.5, 3]} />
        <MeshDistortMaterial speed={2} distort={0.2} radius={1} transparent opacity={0.6} color="orange" />
      </mesh>
      <mesh ref={innerExhaust} scale={[0.1, 0.05, 2]} position={[0, -0.3, -4.5]}>
        <dodecahedronBufferGeometry args={[1.5, 3]} />
        <meshBasicMaterial color="white" />
      </mesh>
    </group>
  )

  // return (
  //   <group ref={car} {...props} dispose={null}>
  //     <PerspectiveCamera makeDefault ref={defaultCamera} fov={75} rotation={[0, Math.PI, 0]} position={[0, 10, -20]} />
  //     {children}
  //     <mesh geometry={nodes.Mesh_body013.geometry} material={materials['plastic.001']} />
  //     <mesh geometry={nodes.Mesh_body013_1.geometry} material={materials['paintGreen.001']} />
  //     <mesh geometry={nodes.Mesh_body013_2.geometry} material={materials['lightFront.001']} />
  //     <mesh geometry={nodes.Mesh_body013_3.geometry} material={materials['_defaultMat.001']} />
  //     <mesh geometry={nodes.Mesh_body013_4.geometry} material={materials['window.001']} />
  //     <mesh geometry={nodes.Mesh_body013_5.geometry} material={materials['lightBack.001']} />
  //     <mesh
  //       geometry={nodes.Mesh_wheel_frontLeft010.geometry}
  //       material={nodes.Mesh_wheel_frontLeft010.material}
  //     />
  //     <mesh
  //       geometry={nodes.Mesh_wheel_frontLeft010_1.geometry}
  //       material={nodes.Mesh_wheel_frontLeft010_1.material}
  //     />
  //     <mesh
  //       geometry={nodes.Mesh_wheel_frontLeft031.geometry}
  //       material={nodes.Mesh_wheel_frontLeft031.material}
  //     />
  //     <mesh
  //       geometry={nodes.Mesh_wheel_frontLeft031_1.geometry}
  //       material={nodes.Mesh_wheel_frontLeft031_1.material}
  //     />
  //     <mesh
  //       geometry={nodes.Mesh_wheel_frontLeft032.geometry}
  //       material={nodes.Mesh_wheel_frontLeft032.material}
  //     />
  //     <mesh
  //       geometry={nodes.Mesh_wheel_frontLeft032_1.geometry}
  //       material={nodes.Mesh_wheel_frontLeft032_1.material}
  //     />
  //     <mesh
  //       geometry={nodes.Mesh_wheel_frontLeft009.geometry}
  //       material={nodes.Mesh_wheel_frontLeft009.material}
  //     />
  //     <mesh
  //       geometry={nodes.Mesh_wheel_frontLeft009_1.geometry}
  //       material={nodes.Mesh_wheel_frontLeft009_1.material}
  //     />
  //   </group>
  // )
}

// useGLTF.preload(
//   '/models/car.gltf'
// )

useGLTF.preload('/models/spaceship.gltf')




